http://antirez.com/post/redis-manifesto.html
========================== http://try.redis-db.com/
========================== commands:

SET server:name "fido"
GET server:name

SETNX connections 10
INCR connections
INCR connections
DEL connections
INCR connections

SET resource:lock "Redis Demo"
EXPIRE resource:lock 120
TTL resource:lock /113
TTL count /-1 (never expires)

# list is ordered
# set is not
# ordered list

RPUSH RPOP
LPUSH LPOP
LLEN
LRANGE

RPUSH friends "Tom"
RPUSH friends "Bob"
LPUSH friends "Sam"
LRANGE friends 0 1
LRANGE friends 0 -1

SADD, SREM, SISMEMBER, SMEMBERS and SUNION

========================== q?
- are redis commands case sensitive? SET not set?
========================== text:


========================== 1
Redis is what is called a key-value store, often referred to as a NoSQL database. The essence of a key-value store is the ability to store some data, called a value, inside a key. This data can later be retrieved only if we know the exact key used to store it. We can use the command SET to store the value "fido" at key "server:name":


    SET server:name "fido"
Redis will store our data permanently, so we can later ask "What is the value stored at key server:name?" and Redis will reply with "fido":


    GET server:name => "fido"


========================== 2
Other common operations provided by key-value stores are DEL to delete a given key and associated value, SET-if-not-exists (called SETNX on Redis) that sets a key only if it does not already exist, and INCR to atomically increment a number stored at a given key:


    SET connections 10
    INCR connections => 11
    INCR connections => 12
    DEL connections
    INCR connections => 1   
    

========================== 3    
There is something special about INCR. Why do we provide such an operation if we can do it ourself with a bit of code? After all it is as simple as:

x = GET count
x = x + 1
SET count x
The problem is that doing the increment in this way will only work as long as there is a single client using the key. See what happens if two clients are accessing this key at the same time:

Client A reads count as 10.
Client B reads count as 10.
Client A increments 10 and sets count to 11.
Client B increments 10 and sets count to 11.
We wanted the value to be 12, but instead it is 11! This is because incrementing the value in this way is not an atomic operation. Calling the INCR command in Redis will prevent this from happening, because it is an atomic operation. Redis provides many of these atomic operations on different types of data.    


========================== 4
Redis can be told that a key should only exist for a certain length of time. This is accomplished with the EXPIRE and TTL commands.


    SET resource:lock "Redis Demo"
    EXPIRE resource:lock 120
This causes the key resource:lock to be deleted in 120 seconds. You can test how long a key will exist for with the TTL command. It returns the number of seconds until it will be deleted.


    TTL resource:lock => 113
    TTL count => -1
The -1 for the TTL of the key count means that it will never expire. Note that if you SET a key, its TTL will reset.


    SET resource:lock "Redis Demo 1"
    EXPIRE resource:lock 120
    TTL resource:lock => 119
    SET resource:lock "Redis Demo 2"
    TTL resource:lock => -1


========================== 
Redis also supports several more complex data structures. The first one we'll look at is a list. A list is a series of ordered values. Some of the important commands for interacting with lists are RPUSH, LPUSH, LLEN, LRANGE, LPOP, and RPOP. You can immediately begin working with a key as a list, as long as it doesn't already exist as a different type.

RPUSH puts the new value at the end of the list.


    RPUSH friends "Tom"
    RPUSH friends "Bob"
LPUSH puts the new value at the start of the list.


    LPUSH friends "Sam"
LRANGE gives a subset of the list. It takes the index of the first element you want to retrieve as its first parameter and the index of the last element you want to retrieve as its second parameter. A value of -1 for the second parameter means to retrieve all elements in the list.


    LRANGE friends 0 -1 => ["Sam","Tom","Bob"]
    LRANGE friends 0 1 => ["Sam","Tom"]
    LRANGE friends 1 2 => ["Tom","Bob"]
    
    
========================== 
LLEN returns the current length of the list.


    LLEN friends => 3
LPOP removes the first element from the list and returns it.


    LPOP friends => "Sam"
RPOP removes the last element from the list and returns it.


    RPOP friends => "Bob"
Note that the list now only has one element:


    LLEN friends => 1
    LRANGE friends 0 -1 => ["Tom"]

    
========================== 
The next data structure that we'll look at is a set. A set is similar to a list, except it does not have a specific order and each element may only appear once. Some of the important commands in working with sets are SADD, SREM, SISMEMBER, SMEMBERS and SUNION.

SADD adds the given value to the set.


    SADD superpowers "flight"
    SADD superpowers "x-ray vision"
    SADD superpowers "reflexes"
SREM removes the given value from the set.


    SREM superpowers "reflexes"

    
========================== 
SISMEMBER tests if the given value is in the set.


    SISMEMBER superpowers "flight" => true
    SISMEMBER superpowers "reflexes" => false
SMEMBERS returns a list of all the members of this set.


    SMEMBERS superpowers => ["flight","x-ray vision"]
SUNION combines two or more sets and returns the list of all elements.


    SADD birdpowers "pecking"
    SADD birdpowers "flight"
    SUNION superpowers birdpowers => ["flight","x-ray vision","pecking"]
    
    
========================== 
The last data structure which Redis supports is the sorted set. It is similar to a regular set, but now each value has an associated score. This score is used to sort the elements in the set.


    ZADD hackers 1940 "Alan Kay"
    ZADD hackers 1953 "Richard Stallman"
    ZADD hackers 1965 "Yukihiro Matsumoto"
    ZADD hackers 1916 "Claude Shannon"
    ZADD hackers 1969 "Linus Torvalds"
    ZADD hackers 1912 "Alan Turing"
In these examples, the scores are years of birth and the values are the names of famous hackers.


    ZRANGE hackers 2 4 => ["Alan Kay","Richard Stallman","Yukihiro Matsumoto"]
    
========================== http://antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html

good to receive "latest something"
as this - SELECT * FROM foo WHERE ... ORDER BY time DESC LIMIT 10
is too slow

FUNCTION get_latest_comments(start,num_items):
    -- first, we are trying to get values from redis
    id_list = redis.lrange("latest.comments",start,start+num_items-1)
    
    --- if there is too few of them, then we'll go to db
    IF id_list.length < num_items
        id_list = SQL_DB("SELECT ... ORDER BY time LIMIT ...")
    END
    RETURN id_list
END
ZADD leaderboard <score> <username>


==========================
http://antirez.com/post/autocomplete-with-redis.html
For every word, like "bar", we add all the prefixes: "b", "ba", "bar"
For every word we finally add the word itself but with a trailing "*" character,

redis> zrange zset 0 -1
1. "b"
2. "ba"
3. "bar"
4. "bar*"
5. "f"
6. "fo"
7. "foo"
8. "foo*"
9. "foob"
10. "fooba"
11. "foobar"
12. "foobar*"

If the user is writing "fo" we do the following:
redis> zrank zset fo
(integer) 5
redis> zrange zset 6 -1
1. "foo"
2. "foo*"
3. "foob"
4. "fooba"
5. "foobar"
6. "foobar*"
We just need to get all the items marked with the trailing "*', so we'll be able to show "foo" and "foobar" as possible completions






http://redis.io/topics/twitter-clone

INCR global:nextUserId => 1000
SET uid:1000:username antirez
SET uid:1000:password p1pp0

uid:1000:followers => Set of uids of all the followers users
uid:1000:following => Set of uids of all the following users

SET uid:1000:auth fea5e81ac8ca77622bed1c2132a021f9
SET auth:fea5e81ac8ca77622bed1c2132a021f9 1000

* Get the username and password via the login form * Check if the username:<username>:uid key actually exists * If it exists we have the user id, (i.e. 1000) * Check if uid:1000:password matches, if not, error message * Ok authenticated! Set "fea5e81ac8ca77622bed1c2132a021f9" (the value of uid:1000:auth) as "auth" cookie

include("retwis.php");

# Form sanity checks
if (!gt("username") || !gt("password"))
    goback("You need to enter both username and password to login.");

# The form is OK, check if the username is available
$username = gt("username");
$password = gt("password");
$r = redisLink();
$userid = $r->get("username:$username:id");
if (!$userid)
    goback("Wrong username or password");
$realpassword = $r->get("uid:$userid:password");
if ($realpassword != $password)
    goback("Wrong useranme or password");

# Username / password OK, set the cookie and redirect to index.php
$authsecret = $r->get("uid:$userid:auth");
setcookie("auth",$authsecret,time()+3600*24*365);
header("Location: index.php");